\title{Generating Well-Typed Terms That Are Not “Useless”}
\date{2024-01-05}
\author{justinefrank}
\author{benjaminquiring}
\author{leonidaslampropoulos}
\taxon{Reference}
\tag{accepted}
%\meta{external}{\route-asset{assets/papers/frank-quiring-lampropoulos-2024.pdf}}
\meta{doi}{10.1145/3632919}
\meta{venue}{[[popl-2024]]}
\meta{video}{https://youtu.be/KkE-wVqUbVQ}

\meta{bibtex}\verb<<<|
@article{10.1145/3632919,
  author = {Frank, Justin and Quiring, Benjamin and Lampropoulos, Leonidas},
  title = {Generating Well-Typed Terms That Are Not “Useless”},
  year = {2024},
  issue_date = {January 2024},
  publisher = {Association for Computing Machinery},
  address = {New York, NY, USA},
  volume = {8},
  number = {POPL},
  url = {https://doi.org/10.1145/3632919},
  doi = {10.1145/3632919},
  abstract = {},
  journal = {Proc. ACM Program. Lang.},
  month = jan,
  articleno = {77},
  numpages = {22},
  keywords = {property-based testing, test generation, well-typed lambda terms}
}
<<<

\p{Random generation of well-typed terms lies at the core of effective  
random testing of compilers for functional languages.  
Existing techniques have had success following a top-down  
type-oriented approach to generation that makes choices locally, which  
suffers from an inherent limitation: the type of an expression is  
often generated independently from the expression itself.  
Such generation frequently yields functions with argument types that cannot  
be used to produce a result in a meaningful way, leaving those  
arguments unused.  
Such "use-less" functions can hinder both performance, as the  
argument generation code is dead but still needs to be compiled, and  
effectiveness, as a lot of interesting optimizations are tested less  
frequently.}

\p{In this paper, we introduce a novel algorithm that is significantly  
more effective at generating functions that use their arguments.  
We formalize both the "local" and the "nonlocal" algorithms as  
step-relations in an extension of the simply-typed lambda calculus  
with type and arguments holes, showing how delaying the generation of  
types for subexpressions by allowing nonlocal generation steps leads  
to "useful" functions.}
