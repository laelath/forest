\title{Indexed Types for a Statically Safe WebAssembly}
\date{2024-01-05}
\author{adamtgeller}
\author{justinefrank}
\author{williamjbowman}
\taxon{Reference}
\tag{accepted}
%\meta{external}{\route-asset{assets/papers/geller-frank-bowman-2024.pdf}}
\meta{doi}{10.1145/3632922}
\meta{venue}{[[popl-2024]]}
\meta{video}{https://youtu.be/mkTgnFrv7lI}

\meta{bibtex}\verb<<<|
@article{10.1145/3632922,
  author = {Geller, Adam T. and Frank, Justin and Bowman, William J.},
  title = {Indexed Types for a Statically Safe WebAssembly},
  year = {2024},
  issue_date = {January 2024},
  publisher = {Association for Computing Machinery},
  address = {New York, NY, USA},
  volume = {8},
  number = {POPL},
  url = {https://doi.org/10.1145/3632922},
  doi = {10.1145/3632922},
  journal = {Proc. ACM Program. Lang.},
  month = jan,
  articleno = {80},
  numpages = {30},
  keywords = {Indexed Types, Optimization and Compiler Design, Program Logics, Type Systems, WebAssembly}
}
<<<

\p{We present Wasm-prechk, a superset of WebAssembly (Wasm) that uses indexed types to express and check simple constraints over program values. This additional static reasoning enables safely removing dynamic safety checks from Wasm, such as memory bounds checks. We implement Wasm-prechk as an extension of the Wasmtime compiler and runtime, evaluate the run-time and compile-time performance of Wasm-prechk vs WebAssembly configurations with explicit dynamic checks, and find an average run-time performance gain of 1.71x faster in the widely used PolyBenchC benchmark suite, for a small overhead in binary size (7.18\% larger) and type-checking time (1.4\% slower). We also prove type and memory safety of Wasm-prechk, prove Wasm safely embeds into Wasm-prechk ensuring backwards compatibility, prove Wasm-prechk type-erases to Wasm, and discuss design and implementation trade-offs.
}
